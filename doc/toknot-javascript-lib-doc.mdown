##Toknot javascript 库文档 
本文档为 Toknot/Admin/Static/js/toknot.js 文档

###1.扩展的 String 对象的函数

* `String.isEmail()` 		是否是email,是email返回true,否则false 
* `String.isCNMoblie()`   是否是中国手机号码,是返回true,否则false
* `String.trim()`			除去字符串首尾空格
* `String.strpos(needle, offset)` 查找字符串中指定字符串,并且可以设置开始处
* `String.ucword()`		将单词首字符转换为大写
* `String.isword()`		字符串是否由字母数字组成
* `String.ucfirst()`		将字符串首字转为大写

###2.扩展的兼容对象

* Node  
* console
* navigator.IE	是否是IE, 是为true, 否则false

###3.基类 TK 包含下列属性

* `TK.doc`  等于 `window.document`
* `TK.bodyNode` 等于 `window.document.body`
* `TK.ugent` 用户代理信息
* `TK.FIREFOX`  如果用户代理是 Firefox 为 true, 否则 false
* `TK.WEBKIT`   如果用户代理是webkit 为true 
* `TK.IEV`	IE版本,大约判断
* `TK.Ajax` 	Ajax 相关对象 * `TK.version`  TK 版本
* `TK.inputType`  input 类型对象

###4.基类 TK 包含事件相关的方法

* `TK.keyDown()` 键盘按下事件,该方法将返回一个对象,包含下面的方法, 参数function为事件触发的函数名
	
	* `TK.keyDown().esc(function)`   ESC键
	* `TK.keyDown().tab(function)`	 TAB
	* `TK.keyDown().enter(function)`	Enter
	* `TK.keyDown().space(function)`	Space键
	* `TK.keyDown().backspace(function)` Backspace
	* `TK.keyDown().up(function)`		方向键 上
	* `TK.keyDown().down(function)`		方向键 下
	* `TK.keyDown().left(function)`		方向键 左
	* `TK.keyDown().right(function)`	方向键 右
	* `TK.keyDown().any(function)`	 任意键盘都会触发


* `TK.keyUp()`	 键盘弹起事件,与`TK.keyDown()`类似返回类似对象,包含的方法名相同

* `TK.delKeyListener(key,type) 删除键盘事件, key为按键对应的code, 使用any时使用any 字符串 

* `TK.mouseout(function, elementObject)`  鼠标移出 elementObject 触发 function,多次添加不会被覆盖,会返回该事件函数索引ID 

* `TK.mouseover(function, elementObject)` 鼠标移入 elementObject 触发 function,多次添加不会被覆盖,会返回该事件函数索引ID

* `TK.mousedown()`	鼠标按下事件,该方法返回一个对象,该对象包含下面的方法,参数function为事件触发的函数名,多次添加不会被覆盖
	
	* `TK.mousedown().left(function)`   鼠标左键,会返回该事件函数索引ID	
	* `TK.mousedown().right(function)` 	鼠标右键,会返回该事件函数索引ID
	* `TK.mousedown().middle(function)`	鼠标中键,会返回该事件函数索引ID
	* `TK.mousedown().any(function)`	鼠标任何按键,会返回该事件函数索引ID


* `TK.mouseup()` 鼠标弹起事件,与`TK.mousedown()`类似返回类似对象,包含的方法名相同,多次添加不会被覆盖,会返回该事件函数索引ID

* `TK.delMouseEventFunction(type,idx,button)` 删除注册的时间函数,
	* `type` 为事件类型名:`mouseout,mouseover,mousedown,mouseup`, 
    * `idx` 为注册函数索引ID,
	* `button` 为当使用按键事件时的按键名字:`left,right,middle,any`


* `TK.getEventNode(e)` 获取当前触发事件所在元素对象

* `TK.getFocusNode()` 获取当前焦点元素对象

* `TK.delDefultEvent(e)` 删除事件默认行为

* `TK.mousePos(e)` 获取当前鼠标事件时，鼠标所在坐标, 返回类似 `{x : 0, y: 0}`


###5.基本类 TK 包含的UI类方法
* `TK.createNode(tagname)` 创建一个节点, 返回一个扩展后的 Element 对象
* `TK.jsPath(idx)`	返回指定顺序的JS文件路径, 如果没有给定idx,将返回最后一个JS文件路径
* `TK.require(file,bodyEnd)` 与`TK.loadJSFile(file,bodyEnd)` 加载一个JS文件
* `TK.ready(function)` 页面加载完成后运行 function, function不会覆盖已经存在的
* `TK.getURIHash()`  返回页面URL中的hash值
* `TK.scrollOffset()` 返回当前滚动条坐标对象,对象类似 `{x:0,y:0}`
* `TK.carousel(data, obj, type,eff, cls, waitTime)` 创建一个幻灯片控件,返回控件元素对象
	* `data`	JSON	轮换元素数据,类似如下

				{'label' : string  该轮换项标签
		         'link'  : string  链接URL
		         'img'   : string  轮换项图片地址
		        }

	* `obj` 本控件摆放位置元素
	* `type` 1为数字列表点击切换,2前进后退切换,3,文字切换,4缩略图列表点击切换
	* `eff` 轮换效果, 1为渐变轮换,2滑动切换
    * `cls` 控件内元素样式名前缀, 实际元素会加上以下名字:
		* CarouselMainBox : 控件样式
		* CarouselListDiv : 展示元素清单样式
		* CarouselPreDiv  : 上一个按钮样式
		* CarouselNextDiv : 下一个按钮样式
		* CarouselCurrentSelect : 当前选中元素指示样式

	* `waitTime` 滚动间隔时间
* `TK.msgBox(msg, cls, zIndex, waitTime)` 创建一个简单的具有时效性的信息控件,返回控件所在DIV对象
	* `msg` 信息内容
	* `cls` 信息提示控件样式
	* `zIndex` 信息提示控件 z-index 值
	* `waitTime` 默认3000ms,信息提示控件自动超时隐藏毫秒时间
* `TK.alertBox(tit, msg, func, cls, cover, zIndex)` 创建一个拥有确定按钮的信息提示控件
	* `tit` 控件标题信息
	* `msg` 控件提示信息
	* `func` 确定按钮后执行的操作

			 回调函数原型样式:
			 callbackFunciton(event, button);
				event  : EventObject   点击事件
				button : boolean       等于true

	* `cls` 控件内元素样式名前缀,内部实际会跟随以下名字:
		* TitleDiv  : 标题栏样式
		* MainDiv   : 控件中间主题部分样式
		* ButtonDiv : 按钮所在元素样式 
	
	* `cover` 是否显示cover层,默认不显示，true为显示
	* `zIndex` 控件 z-index 值,如果没有设置将为当前页面最上面

* `TK.confirmBox(tit, msg, func, cls, cover, zIndex)`  创建一个拥有确定与取消按钮的信息提示控件
	* 参数与`TK.alertBox()`相同, 只是func 的接收参数中button值在点击取消时为false,确定为true
* `TK.inputBox(tit, msg, inputList, buttonList, cls, cover, zIndex)`创建一个具有表单功能的控件
	* `tit` 控件标题信息
	* `msg`  默认提示信息
	* `inputList` 表单内input元素清单,select元素将会使用selectDiv控件替代,值为一个数组,下面为其中一个input元素:

					{'label' : string   input元素标签
					 'type'  : string   input元素类型
					 'name'  : string   input元素name值
					 'value' : string   input元素默认值
					 'cls'   : string   input元素直接使用样式,
							  			内部实际会跟随以下名字：
										ItemDiv   : input元素的上一级Div样式
										ItemLabel : input元素的label元素样式

	* `buttonList` 按钮清单，这里的按钮不是button类型input标签,值为数组,下面为其中一个元素组成:

				 {'label' : string   按钮显示名字,innerHTML值
					'value' : string   按钮值,attributes属性
					'cls'   : string   按钮样式
					'call'  : string/function   按钮点击回调函数名
					'url'   : string   表单提交URL
				 }

	* `cls`  控件内元素样式名前缀,内部实际会跟随以下名字:
		* TitleDiv  : 标题栏样式
		* MainDiv   : 控件中间主题部分样式
		* ButtonDiv : 按钮所在元素样式	
		* MsgDiv    : 提示信息样式名
		* CloseDiv  : 关闭按钮样式名
	* `cover`  是否显示cover层，true为显示，默认不显示
	* `zIndex`  控件z-index 值，默认在页面最上面
	* 返回一个扩展后元素对象,用下列方法:
		* `box.iHide()`       销毁控件
		* `box.msg(msg, cls, visibility)`     显示提示信息
			* msg: string   提示信息内容
		    * cls: string   提示信息样式名 
		    * visibility : boolean  隐藏后是否保留提示信息位置 
		* `box.submitInput(url, func, validFunc)` 提交表单	
			* url   : string    提交表单URL

			* func  : function  表单提交返回回调函数,回调函数原型样式：

					callbackFunciton(returnData) 
					returnData : JSON  Ajax返回数据

			* validFunc : function  表单数据检测回调函数

					回调函数原型样式：
					callbackFunciton(formData, box)
					returnData : JSON 表单数据 
										   KEY值为input name值
					box        : ELEMENT_NODE 控件对象
					return boolean 返回false将阻止表单提交,true提交表单


* `TK.selectDiv(optionList, name, func, def, cls)` 创建一个下来列表控件
	* `optionList` 列表数据,其中一个元素类似下面:
					单个选项所需要的数据:
		                           {'label'    : string  选项显示名
		                            'value'    : mixed   选项值
		                           'disabled' : boolean true时该项不可选，默认可选
		                            }
	* `name`  控件在表单内的name值
	* `func`  更换选择项后回调函数,可选,回调函数原型样式：callbackFunciton(value),value为选择的值
	* `def`   默认项数据, 数据样式与optionList单项一样,可选
	* `cls`  控件内元素样式名前缀,内部实际会跟随以下名字:
		 * DefDiv    : 当前显示项外层样式 
		 * DefOption : 当前显示项样式
		 * SelectOptionDiv : 下拉列表层样式
		 * Selected  : 下拉列表中选中项样式
		 * OptionDisable : 不可选项样式 
		 * OptionMouseOver : 鼠标移动到选项上时样式

* `TK.pageShowSize()` 获取当前浏览器可视区域尺寸, 返回类似 `{h: 0, y: 0}`

* `TK.getOpacityStr(num)` 获取兼容性透明度设置样式

* `TK.showPageCover()`  显示一个遮照层

* `TK.hiddenPageCover()`  隐藏遮照层

* `TK.drawRect(x, y, w, h, color)`  画一个矩形

* `TK.drawLineTrends(style, initData, padding)` 创建基于canvas 元素的趋势图表

###6.其他
* `TK.setCookie(cn, v, ex)` 设置cookie值

* `TK.getCookie(cn)`	获取一个cookie 值 

* `TK.getFormInputData(frm, disable_no_name)` 获取指定元素对象所包含的所有input或相关表单数据 

* `TK.submitForm(ele, callFunc, validFunc)` 自动提交表单,本方法只能提交form标签表单

* `TK.time()` 获取当前时间戳,1970-1-1 00:00:00 到当前的秒数

* `TK.repeat(str, n)` 重复一个字符串

* `TK.preZero(num, bit)` 添加前导零

* `TK.date(time, cache)`  获取 YYYY-mm-dd HH:ii:ss 格式时间, 如果设置time,将获取该时间的日期,如果cache为true,每次调用将只更新一秒的时间

* `TK.rand()` 获取一个10位数的随机数

* `TK.localDate()` 获取 YYYY-mm-dd HH:ii:ss 格式本地时间

* `TK.$(ele)` 扩展Element对象方法, 如果全局范围内没有定义 windows.$, 将会创建 window.$ 并指向本方法,详细见 第7大类

###7. TK.$() 方法

###8.TK.Ajax 属性 